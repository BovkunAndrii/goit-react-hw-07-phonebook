{"version":3,"sources":["components/ContactListItem/contactListItem.module.css","App.module.css","components/Filter/filter.module.css","components/ContactList/contactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","contactId","delete","getContacts","state","contacts","items","getFilter","filter","isContactLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useSelector","useDispatch","useState","setName","setNumber","handleChange","e","target","value","onSubmit","contactName","preventDefault","some","alert","contactsOperations","className","styles","form","formLabel","formInput","type","pattern","title","required","onChange","buttonSubmit","ContactListItem","id","onDeletContact","contactListItem","buttonDelete","onClick","ContactList","contactList","map","Filter","filterLabel","filterInput","contactsAction","App","isLoadingContacts","useEffect","container","subtitle","color","height","width","createReducer","_","payload","combineReducers","store","configureStore","reducer","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9b9c174.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"contactListItem_contactListItem__21CSb\",\"contact\":\"contactListItem_contact__37gYn\",\"buttonDelete\":\"contactListItem_buttonDelete__2a9I3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__gHTWW\",\"title\":\"App_title__1O0sh\",\"subtitle\":\"App_subtitle__R4__F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"filter_filterLabel__1jH76\",\"filterInput\":\"filter_filterInput__34iGr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"contactList_contactList__3bgZv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3OA5l\",\"formLabel\":\"ContactForm_formLabel__27V0P\",\"formInput\":\"ContactForm_formInput__1iOWa\",\"buttonSubmit\":\"ContactForm_buttonSubmit__6OadB\"};","// Модули\nimport { createAction } from '@reduxjs/toolkit';\n\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","// Модули\nimport axios from 'axios';\n\n// Компоненты\nimport {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n} from './contacts-action';\n\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nconst fetchContacts = () => dispatch => {\n    dispatch(fetchContactsRequest());\n\n    axios\n        .get('/contacts')\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n        .catch(error => dispatch(fetchContactsError(error)));\n};\n\nconst addContact = ({ name, number }) => dispatch => {\n    const contact = {\n        name,\n        number,\n    };\n\n    dispatch(addContactRequest());\n\n    axios\n        .post('/contacts', contact)\n        .then(({ data }) => dispatch(addContactSuccess(data)))\n        .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = contactId => dispatch => {\n    dispatch(deleteContactRequest());\n    \n    axios\n        .delete(`/contacts/${contactId}`)\n        .then(({ data }) => dispatch(deleteContactSuccess(contactId)))\n        .catch(error => dispatch(deleteContactError(error)));\n};\n\n// eslint-disable-next-line\nexport default {\n    fetchContacts,\n    addContact,\n    deleteContact,\n};","// Модули\nimport { createSelector } from \"reselect\";\n\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const isContactLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter),\n        );\n    });\n\n// export const getVisibleContacts = state => {\n//     const contacts = getContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//         contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n// };","// Модули\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n\n// Стили\nimport styles from '../ContactForm/ContactForm.module.css';\n\n\nexport default function ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch()\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  const findByName = contactName => {\n    return contacts.some(({ name }) => name === contactName);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (findByName(name)) {\n      alert(`${name} is already in contacts!`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact({name, number}))\n\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <label className={styles.formLabel}>\n        Name\n        <input\n          className={styles.formInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={styles.formLabel}>\n        Number\n        <input\n          className={styles.formInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button type=\"submit\" className={styles.buttonSubmit}>\n        Add contact\n      </button>\n    </form>\n  );\n}","// Модули\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Стили\nimport styles from '../ContactListItem/contactListItem.module.css';\n\nconst ContactListItem = ({ name, number, id, onDeletContact }) => {\n  return (\n  <li className={styles.contactListItem}>\n    <p className={styles.contact}>\n      {' '}\n      {name}: {number}\n    </p>\n    <button\n      className={styles.buttonDelete}\n      type=\"button\"\n      onClick={() => onDeletContact(id)}\n    >\n      Delete\n    </button>\n  </li>\n)};\n\nContactListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeletContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;","// Модули\nimport React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\n\n// Компоненты\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\n// Стили\nimport styles from '../ContactList/contactList.module.css';\n\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeletContact = id => dispatch(contactsOperations.deleteContact(id))\n\n  return (\n  <ul className={styles.contactList}>\n    {contacts.map(({ id, name, number }) => (\n      <ContactListItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        onDeletContact={()=> onDeletContact(id)}\n      />\n    ))}\n  </ul>\n)};\n\n\nexport default ContactList;","// Модули\nimport React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\n// import contactsAction from '../../redux/contacts/contacts-action';\nimport * as contactsAction from '../../redux/contacts/contacts-action';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\n// Стили\nimport styles from '../Filter/filter.module.css';\n\n\nconst Filter = () => {\n\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(contactsAction.changeFilter(e.target.value))\n \n  return (\n    <label className={styles.filterLabel}>\n      Find contacts by name\n      <input\n        className={styles.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\n\nexport default Filter;","// Модули\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from 'react';\n\n// Компоненты\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport contactsOperations from './redux/contacts/contacts-operations';\nimport Loader from \"react-loader-spinner\";\nimport {isContactLoading } from './redux/contacts/contacts-selectors';\n\n// Стили\nimport styles from './App.module.css';\n\n\nconst App = () => {\n  const isLoadingContacts = useSelector(isContactLoading);\n  const dispatch = useDispatch();\n \n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Phonebook</h1>\n      <ContactForm  />\n      <h2 className={styles.subtitle}>Contacts</h2>\n      <Filter />\n       {isLoadingContacts && <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","// Модули\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\n// Компоненты\nimport {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n    changeFilter\n} from './contacts-action';\n\n\nconst items = createReducer([], {\n    [fetchContactsSuccess]:(_, { payload }) =>payload,\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n    [fetchContactsRequest]: () => true,\n    [fetchContactsSuccess]: () => false,\n    [fetchContactsError]: () => false,\n    [addContactRequest]: () => true,\n    [addContactSuccess]: () => false,\n    [addContactError]: () => false,\n    [deleteContactRequest]: () => true,\n    [deleteContactSuccess]: () => false,\n    [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n});\n\n\nexport default combineReducers({\n    items,\n    filter,\n    loading,\n});\n\n","// Модули\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  // persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\n\n// Компоненты\nimport contactsReducers from './contacts/contacts-reduser';\n\n\nconst middleware = (getDefaultMiddleware) => getDefaultMiddleware({\n  serializableCheck: {\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n  },\n}).concat(logger);\n\n\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducers,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\n\n// eslint-disable-next-line\n// export default {store, persistor};\n\nexport default store\n","// Модули\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\n// Компоненты\nimport App from './App';\nimport store from './redux/store'\n\n// Стили\nimport 'modern-normalize/modern-normalize.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}